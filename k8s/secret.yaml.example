# Example Kubernetes Secret for sensitive data
# DO NOT commit this file with real credentials
# 
# Configuration values should match those in .mise.toml
# 
# BEST PRACTICE: Use external secret management:
# - AWS: AWS Secrets Manager + External Secrets Operator
# - Alibaba: KMS + External Secrets Operator
# - Vault: HashiCorp Vault
# - Sealed Secrets: Bitnami Sealed Secrets
#
# Manual creation (NOT recommended for production):
# kubectl create secret generic swen-secrets \
#   --from-literal=gemini-api-key=YOUR_GEMINI_KEY \
#   --from-literal=db-password=YOUR_DB_PASSWORD

apiVersion: v1
kind: Secret
metadata:
  name: swen-secrets
  namespace: default
type: Opaque
stringData:
  # AI Service API Keys (Google Gemini) - matches mise.toml
  gemini-api-key: "your-gemini-api-key-here"
  gemini-model: "gemini-2.5-flash"
  
  # Brave Search API Keys - matches mise.toml
  brave-api-key: "your-brave-api-key-here"
  brave-image-search-url: "https://api.search.brave.com/res/v1/images/search"
  brave-video-search-url: "https://api.search.brave.com/res/v1/videos/search"
  
  # Database Credentials (for PostgreSQL) - matches mise.toml
  db-host: "swen-postgres"
  db-port: "5432"
  db-name: "swen_news"
  db-user: "swen_user"
  db-password: "CHANGE_THIS_PASSWORD_IN_PRODUCTION"
  
  # Complete database URL (constructed from above) - matches mise.toml
  database-url: "postgresql+asyncpg://swen_user:CHANGE_THIS_PASSWORD_IN_PRODUCTION@swen-postgres:5432/swen_news"

